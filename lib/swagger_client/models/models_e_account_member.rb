=begin
#SendPost API

#SendPost API to send transactional emails reliably

OpenAPI spec version: 1.0.0
Contact: hello@sendx.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'date'

module SwaggerClient
  class ModelsEAccountMember
    attr_accessor :company_name

    attr_accessor :current_email_service_provider

    attr_accessor :industry

    attr_accessor :logo_url

    attr_accessor :name

    attr_accessor :onboard_c_finished

    attr_accessor :onboard_q_answered

    attr_accessor :phone_number

    attr_accessor :sending_volume_per_month

    attr_accessor :uid

    attr_accessor :verify_email

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'company_name' => :'companyName',
        :'current_email_service_provider' => :'currentEmailServiceProvider',
        :'industry' => :'industry',
        :'logo_url' => :'logoURL',
        :'name' => :'name',
        :'onboard_c_finished' => :'onboardCFinished',
        :'onboard_q_answered' => :'onboardQAnswered',
        :'phone_number' => :'phoneNumber',
        :'sending_volume_per_month' => :'sendingVolumePerMonth',
        :'uid' => :'uid',
        :'verify_email' => :'verifyEmail'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'company_name' => :'String',
        :'current_email_service_provider' => :'String',
        :'industry' => :'String',
        :'logo_url' => :'String',
        :'name' => :'String',
        :'onboard_c_finished' => :'BOOLEAN',
        :'onboard_q_answered' => :'BOOLEAN',
        :'phone_number' => :'String',
        :'sending_volume_per_month' => :'String',
        :'uid' => :'String',
        :'verify_email' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'companyName')
        self.company_name = attributes[:'companyName']
      end

      if attributes.has_key?(:'currentEmailServiceProvider')
        self.current_email_service_provider = attributes[:'currentEmailServiceProvider']
      end

      if attributes.has_key?(:'industry')
        self.industry = attributes[:'industry']
      end

      if attributes.has_key?(:'logoURL')
        self.logo_url = attributes[:'logoURL']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'onboardCFinished')
        self.onboard_c_finished = attributes[:'onboardCFinished']
      end

      if attributes.has_key?(:'onboardQAnswered')
        self.onboard_q_answered = attributes[:'onboardQAnswered']
      end

      if attributes.has_key?(:'phoneNumber')
        self.phone_number = attributes[:'phoneNumber']
      end

      if attributes.has_key?(:'sendingVolumePerMonth')
        self.sending_volume_per_month = attributes[:'sendingVolumePerMonth']
      end

      if attributes.has_key?(:'uid')
        self.uid = attributes[:'uid']
      end

      if attributes.has_key?(:'verifyEmail')
        self.verify_email = attributes[:'verifyEmail']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          company_name == o.company_name &&
          current_email_service_provider == o.current_email_service_provider &&
          industry == o.industry &&
          logo_url == o.logo_url &&
          name == o.name &&
          onboard_c_finished == o.onboard_c_finished &&
          onboard_q_answered == o.onboard_q_answered &&
          phone_number == o.phone_number &&
          sending_volume_per_month == o.sending_volume_per_month &&
          uid == o.uid &&
          verify_email == o.verify_email
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [company_name, current_email_service_provider, industry, logo_url, name, onboard_c_finished, onboard_q_answered, phone_number, sending_volume_per_month, uid, verify_email].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
