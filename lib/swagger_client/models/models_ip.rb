=begin
#SendPost API

#SendPost API to send transactional emails reliably

OpenAPI spec version: 1.0.0
Contact: hello@sendx.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'date'

module SwaggerClient
  class ModelsIP
    attr_accessor :aol_settings

    attr_accessor :auto_warmup_enabled

    attr_accessor :auto_warmup_stage

    attr_accessor :comcast_settings

    attr_accessor :created

    attr_accessor :default_settings

    attr_accessor :gmail_settings

    attr_accessor :gmx_settings

    attr_accessor :icloud_settings

    attr_accessor :id

    attr_accessor :mailru_settings

    attr_accessor :microsoft_settings

    attr_accessor :public_ip

    attr_accessor :qq_settings

    attr_accessor :reverse_dns_hostname

    attr_accessor :system_domain

    attr_accessor :type

    attr_accessor :yahoo_settings

    attr_accessor :yandex_settings

    attr_accessor :zoho_settings

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'aol_settings' => :'aolSettings',
        :'auto_warmup_enabled' => :'autoWarmupEnabled',
        :'auto_warmup_stage' => :'autoWarmupStage',
        :'comcast_settings' => :'comcastSettings',
        :'created' => :'created',
        :'default_settings' => :'defaultSettings',
        :'gmail_settings' => :'gmailSettings',
        :'gmx_settings' => :'gmxSettings',
        :'icloud_settings' => :'icloudSettings',
        :'id' => :'id',
        :'mailru_settings' => :'mailruSettings',
        :'microsoft_settings' => :'microsoftSettings',
        :'public_ip' => :'publicIP',
        :'qq_settings' => :'qqSettings',
        :'reverse_dns_hostname' => :'reverseDNSHostname',
        :'system_domain' => :'systemDomain',
        :'type' => :'type',
        :'yahoo_settings' => :'yahooSettings',
        :'yandex_settings' => :'yandexSettings',
        :'zoho_settings' => :'zohoSettings'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'aol_settings' => :'String',
        :'auto_warmup_enabled' => :'BOOLEAN',
        :'auto_warmup_stage' => :'Integer',
        :'comcast_settings' => :'String',
        :'created' => :'Integer',
        :'default_settings' => :'String',
        :'gmail_settings' => :'String',
        :'gmx_settings' => :'String',
        :'icloud_settings' => :'String',
        :'id' => :'Integer',
        :'mailru_settings' => :'String',
        :'microsoft_settings' => :'String',
        :'public_ip' => :'String',
        :'qq_settings' => :'String',
        :'reverse_dns_hostname' => :'String',
        :'system_domain' => :'ModelsSystemDomain',
        :'type' => :'ModelsIPType',
        :'yahoo_settings' => :'String',
        :'yandex_settings' => :'String',
        :'zoho_settings' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'aolSettings')
        self.aol_settings = attributes[:'aolSettings']
      end

      if attributes.has_key?(:'autoWarmupEnabled')
        self.auto_warmup_enabled = attributes[:'autoWarmupEnabled']
      end

      if attributes.has_key?(:'autoWarmupStage')
        self.auto_warmup_stage = attributes[:'autoWarmupStage']
      end

      if attributes.has_key?(:'comcastSettings')
        self.comcast_settings = attributes[:'comcastSettings']
      end

      if attributes.has_key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.has_key?(:'defaultSettings')
        self.default_settings = attributes[:'defaultSettings']
      end

      if attributes.has_key?(:'gmailSettings')
        self.gmail_settings = attributes[:'gmailSettings']
      end

      if attributes.has_key?(:'gmxSettings')
        self.gmx_settings = attributes[:'gmxSettings']
      end

      if attributes.has_key?(:'icloudSettings')
        self.icloud_settings = attributes[:'icloudSettings']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'mailruSettings')
        self.mailru_settings = attributes[:'mailruSettings']
      end

      if attributes.has_key?(:'microsoftSettings')
        self.microsoft_settings = attributes[:'microsoftSettings']
      end

      if attributes.has_key?(:'publicIP')
        self.public_ip = attributes[:'publicIP']
      end

      if attributes.has_key?(:'qqSettings')
        self.qq_settings = attributes[:'qqSettings']
      end

      if attributes.has_key?(:'reverseDNSHostname')
        self.reverse_dns_hostname = attributes[:'reverseDNSHostname']
      end

      if attributes.has_key?(:'systemDomain')
        self.system_domain = attributes[:'systemDomain']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'yahooSettings')
        self.yahoo_settings = attributes[:'yahooSettings']
      end

      if attributes.has_key?(:'yandexSettings')
        self.yandex_settings = attributes[:'yandexSettings']
      end

      if attributes.has_key?(:'zohoSettings')
        self.zoho_settings = attributes[:'zohoSettings']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          aol_settings == o.aol_settings &&
          auto_warmup_enabled == o.auto_warmup_enabled &&
          auto_warmup_stage == o.auto_warmup_stage &&
          comcast_settings == o.comcast_settings &&
          created == o.created &&
          default_settings == o.default_settings &&
          gmail_settings == o.gmail_settings &&
          gmx_settings == o.gmx_settings &&
          icloud_settings == o.icloud_settings &&
          id == o.id &&
          mailru_settings == o.mailru_settings &&
          microsoft_settings == o.microsoft_settings &&
          public_ip == o.public_ip &&
          qq_settings == o.qq_settings &&
          reverse_dns_hostname == o.reverse_dns_hostname &&
          system_domain == o.system_domain &&
          type == o.type &&
          yahoo_settings == o.yahoo_settings &&
          yandex_settings == o.yandex_settings &&
          zoho_settings == o.zoho_settings
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [aol_settings, auto_warmup_enabled, auto_warmup_stage, comcast_settings, created, default_settings, gmail_settings, gmx_settings, icloud_settings, id, mailru_settings, microsoft_settings, public_ip, qq_settings, reverse_dns_hostname, system_domain, type, yahoo_settings, yandex_settings, zoho_settings].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
