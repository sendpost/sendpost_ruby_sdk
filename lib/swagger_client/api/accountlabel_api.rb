=begin
#SendPost API

#SendPost API to send transactional emails reliably

OpenAPI spec version: 1.0.0
Contact: hello@sendx.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module SwaggerClient
  class AccountlabelApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Count Total Labels
    # @param x_account_api_key Account API Key
    # @param [Hash] opts the optional parameters
    # @return [ModelsCountStat]
    def label_router_count(x_account_api_key, opts = {})
      data, _status_code, _headers = label_router_count_with_http_info(x_account_api_key, opts)
      data
    end

    # Count Total Labels
    # @param x_account_api_key Account API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelsCountStat, Fixnum, Hash)>] ModelsCountStat data, response status code and response headers
    def label_router_count_with_http_info(x_account_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountlabelApi.label_router_count ...'
      end
      # verify the required parameter 'x_account_api_key' is set
      if @api_client.config.client_side_validation && x_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_api_key' when calling AccountlabelApi.label_router_count"
      end
      # resource path
      local_var_path = '/account/label/count'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Account-ApiKey'] = x_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelsCountStat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountlabelApi#label_router_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Label
    # @param x_account_api_key Account API Key
    # @param body The Label content
    # @param [Hash] opts the optional parameters
    # @return [ModelsLabel]
    def label_router_create(x_account_api_key, body, opts = {})
      data, _status_code, _headers = label_router_create_with_http_info(x_account_api_key, body, opts)
      data
    end

    # Create Label
    # @param x_account_api_key Account API Key
    # @param body The Label content
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelsLabel, Fixnum, Hash)>] ModelsLabel data, response status code and response headers
    def label_router_create_with_http_info(x_account_api_key, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountlabelApi.label_router_create ...'
      end
      # verify the required parameter 'x_account_api_key' is set
      if @api_client.config.client_side_validation && x_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_api_key' when calling AccountlabelApi.label_router_create"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AccountlabelApi.label_router_create"
      end
      # resource path
      local_var_path = '/account/label/'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Account-ApiKey'] = x_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelsLabel')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountlabelApi#label_router_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Label
    # @param x_account_api_key Account API Key
    # @param label_id The LabelId you want to delete
    # @param [Hash] opts the optional parameters
    # @return [ModelsDeleteResponse]
    def label_router_delete(x_account_api_key, label_id, opts = {})
      data, _status_code, _headers = label_router_delete_with_http_info(x_account_api_key, label_id, opts)
      data
    end

    # Delete Label
    # @param x_account_api_key Account API Key
    # @param label_id The LabelId you want to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelsDeleteResponse, Fixnum, Hash)>] ModelsDeleteResponse data, response status code and response headers
    def label_router_delete_with_http_info(x_account_api_key, label_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountlabelApi.label_router_delete ...'
      end
      # verify the required parameter 'x_account_api_key' is set
      if @api_client.config.client_side_validation && x_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_api_key' when calling AccountlabelApi.label_router_delete"
      end
      # verify the required parameter 'label_id' is set
      if @api_client.config.client_side_validation && label_id.nil?
        fail ArgumentError, "Missing the required parameter 'label_id' when calling AccountlabelApi.label_router_delete"
      end
      # resource path
      local_var_path = '/account/label/{labelId}'.sub('{' + 'labelId' + '}', label_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Account-ApiKey'] = x_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelsDeleteResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountlabelApi#label_router_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find Label by LabelId
    # @param x_account_api_key Account API Key
    # @param label_id the LabelId you want to get
    # @param [Hash] opts the optional parameters
    # @return [ModelsLabel]
    def label_router_get(x_account_api_key, label_id, opts = {})
      data, _status_code, _headers = label_router_get_with_http_info(x_account_api_key, label_id, opts)
      data
    end

    # Find Label by LabelId
    # @param x_account_api_key Account API Key
    # @param label_id the LabelId you want to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelsLabel, Fixnum, Hash)>] ModelsLabel data, response status code and response headers
    def label_router_get_with_http_info(x_account_api_key, label_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountlabelApi.label_router_get ...'
      end
      # verify the required parameter 'x_account_api_key' is set
      if @api_client.config.client_side_validation && x_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_api_key' when calling AccountlabelApi.label_router_get"
      end
      # verify the required parameter 'label_id' is set
      if @api_client.config.client_side_validation && label_id.nil?
        fail ArgumentError, "Missing the required parameter 'label_id' when calling AccountlabelApi.label_router_get"
      end
      # resource path
      local_var_path = '/account/label/{labelId}'.sub('{' + 'labelId' + '}', label_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Account-ApiKey'] = x_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelsLabel')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountlabelApi#label_router_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get All Labels
    # @param x_account_api_key Account API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<ModelsLabel>]
    def label_router_get_all(x_account_api_key, opts = {})
      data, _status_code, _headers = label_router_get_all_with_http_info(x_account_api_key, opts)
      data
    end

    # Get All Labels
    # @param x_account_api_key Account API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ModelsLabel>, Fixnum, Hash)>] Array<ModelsLabel> data, response status code and response headers
    def label_router_get_all_with_http_info(x_account_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountlabelApi.label_router_get_all ...'
      end
      # verify the required parameter 'x_account_api_key' is set
      if @api_client.config.client_side_validation && x_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_api_key' when calling AccountlabelApi.label_router_get_all"
      end
      # resource path
      local_var_path = '/account/label/'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Account-ApiKey'] = x_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ModelsLabel>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountlabelApi#label_router_get_all\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Label
    # @param x_account_api_key Account API Key
    # @param label_id The LabelId you want to update
    # @param body The body
    # @param [Hash] opts the optional parameters
    # @return [ModelsLabel]
    def label_router_update(x_account_api_key, label_id, body, opts = {})
      data, _status_code, _headers = label_router_update_with_http_info(x_account_api_key, label_id, body, opts)
      data
    end

    # Update Label
    # @param x_account_api_key Account API Key
    # @param label_id The LabelId you want to update
    # @param body The body
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelsLabel, Fixnum, Hash)>] ModelsLabel data, response status code and response headers
    def label_router_update_with_http_info(x_account_api_key, label_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountlabelApi.label_router_update ...'
      end
      # verify the required parameter 'x_account_api_key' is set
      if @api_client.config.client_side_validation && x_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_api_key' when calling AccountlabelApi.label_router_update"
      end
      # verify the required parameter 'label_id' is set
      if @api_client.config.client_side_validation && label_id.nil?
        fail ArgumentError, "Missing the required parameter 'label_id' when calling AccountlabelApi.label_router_update"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AccountlabelApi.label_router_update"
      end
      # resource path
      local_var_path = '/account/label/{labelId}'.sub('{' + 'labelId' + '}', label_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Account-ApiKey'] = x_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelsLabel')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountlabelApi#label_router_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
