=begin
#SendPost API

#SendPost API to send transactional emails reliably

OpenAPI spec version: 1.0.0
Contact: hello@sendx.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module SwaggerClient
  class AccounteventApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Count all events from a account for a given time-range
    # @param x_account_api_key Account API Key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search search term
    # @option opts [String] :type search type
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @option opts [String] :source data source from which to get timestamp keys subaccount or ip
    # @option opts [String] :source_id source id from which to get timestamp keys subaccount or ip
    # @return [ModelsCountStat]
    def event_router_count_all_events_from_a_account_for_a_given_time_range(x_account_api_key, opts = {})
      data, _status_code, _headers = event_router_count_all_events_from_a_account_for_a_given_time_range_with_http_info(x_account_api_key, opts)
      data
    end

    # Count all events from a account for a given time-range
    # @param x_account_api_key Account API Key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search search term
    # @option opts [String] :type search type
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @option opts [String] :source data source from which to get timestamp keys subaccount or ip
    # @option opts [String] :source_id source id from which to get timestamp keys subaccount or ip
    # @return [Array<(ModelsCountStat, Fixnum, Hash)>] ModelsCountStat data, response status code and response headers
    def event_router_count_all_events_from_a_account_for_a_given_time_range_with_http_info(x_account_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccounteventApi.event_router_count_all_events_from_a_account_for_a_given_time_range ...'
      end
      # verify the required parameter 'x_account_api_key' is set
      if @api_client.config.client_side_validation && x_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_api_key' when calling AccounteventApi.event_router_count_all_events_from_a_account_for_a_given_time_range"
      end
      # resource path
      local_var_path = '/account/event/count'

      # query parameters
      query_params = {}
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'sourceId'] = opts[:'source_id'] if !opts[:'source_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Account-ApiKey'] = x_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelsCountStat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccounteventApi#event_router_count_all_events_from_a_account_for_a_given_time_range\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Count all events from a node of a sub-account for a given time-range
    # @param x_account_api_key Account API Key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search search term
    # @option opts [String] :type search type
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @option opts [String] :source data source from which to get timestamp keys subaccount or ip
    # @option opts [String] :source_id source id from which to get timestamp keys subaccount or ip
    # @return [ModelsCountStat]
    def event_router_count_all_events_from_a_node_of_a_sub_account_for_a_given_time_range(x_account_api_key, opts = {})
      data, _status_code, _headers = event_router_count_all_events_from_a_node_of_a_sub_account_for_a_given_time_range_with_http_info(x_account_api_key, opts)
      data
    end

    # Count all events from a node of a sub-account for a given time-range
    # @param x_account_api_key Account API Key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search search term
    # @option opts [String] :type search type
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @option opts [String] :source data source from which to get timestamp keys subaccount or ip
    # @option opts [String] :source_id source id from which to get timestamp keys subaccount or ip
    # @return [Array<(ModelsCountStat, Fixnum, Hash)>] ModelsCountStat data, response status code and response headers
    def event_router_count_all_events_from_a_node_of_a_sub_account_for_a_given_time_range_with_http_info(x_account_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccounteventApi.event_router_count_all_events_from_a_node_of_a_sub_account_for_a_given_time_range ...'
      end
      # verify the required parameter 'x_account_api_key' is set
      if @api_client.config.client_side_validation && x_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_api_key' when calling AccounteventApi.event_router_count_all_events_from_a_node_of_a_sub_account_for_a_given_time_range"
      end
      # resource path
      local_var_path = '/account/event/node/count'

      # query parameters
      query_params = {}
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'sourceId'] = opts[:'source_id'] if !opts[:'source_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Account-ApiKey'] = x_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelsCountStat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccounteventApi#event_router_count_all_events_from_a_node_of_a_sub_account_for_a_given_time_range\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find Event By Id
    # @param x_account_api_key Account API Key
    # @param event_id the eventId that you want to retrieve
    # @param [Hash] opts the optional parameters
    # @return [ModelsQEvent]
    def event_router_get(x_account_api_key, event_id, opts = {})
      data, _status_code, _headers = event_router_get_with_http_info(x_account_api_key, event_id, opts)
      data
    end

    # Find Event By Id
    # @param x_account_api_key Account API Key
    # @param event_id the eventId that you want to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelsQEvent, Fixnum, Hash)>] ModelsQEvent data, response status code and response headers
    def event_router_get_with_http_info(x_account_api_key, event_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccounteventApi.event_router_get ...'
      end
      # verify the required parameter 'x_account_api_key' is set
      if @api_client.config.client_side_validation && x_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_api_key' when calling AccounteventApi.event_router_get"
      end
      # verify the required parameter 'event_id' is set
      if @api_client.config.client_side_validation && event_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_id' when calling AccounteventApi.event_router_get"
      end
      # resource path
      local_var_path = '/account/event/{eventId}'.sub('{' + 'eventId' + '}', event_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Account-ApiKey'] = x_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelsQEvent')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccounteventApi#event_router_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find all events of a sub-account from a specific node for a give time-range
    # @param x_account_api_key Account API Key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search search term
    # @option opts [String] :type search type
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @option opts [String] :source data source from which to get timestamp keys subaccount or ip
    # @option opts [String] :source_id source id from which to get timestamp keys subaccount or ip
    # @return [Array<ModelsQEvent>]
    def event_router_get_all_event_timestamp_keys_of_a_sub_account_from_a_specific_node_for_a_given_time_range(x_account_api_key, opts = {})
      data, _status_code, _headers = event_router_get_all_event_timestamp_keys_of_a_sub_account_from_a_specific_node_for_a_given_time_range_with_http_info(x_account_api_key, opts)
      data
    end

    # Find all events of a sub-account from a specific node for a give time-range
    # @param x_account_api_key Account API Key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search search term
    # @option opts [String] :type search type
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @option opts [String] :source data source from which to get timestamp keys subaccount or ip
    # @option opts [String] :source_id source id from which to get timestamp keys subaccount or ip
    # @return [Array<(Array<ModelsQEvent>, Fixnum, Hash)>] Array<ModelsQEvent> data, response status code and response headers
    def event_router_get_all_event_timestamp_keys_of_a_sub_account_from_a_specific_node_for_a_given_time_range_with_http_info(x_account_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccounteventApi.event_router_get_all_event_timestamp_keys_of_a_sub_account_from_a_specific_node_for_a_given_time_range ...'
      end
      # verify the required parameter 'x_account_api_key' is set
      if @api_client.config.client_side_validation && x_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_api_key' when calling AccounteventApi.event_router_get_all_event_timestamp_keys_of_a_sub_account_from_a_specific_node_for_a_given_time_range"
      end
      # resource path
      local_var_path = '/account/event/node/timestampkeys'

      # query parameters
      query_params = {}
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'sourceId'] = opts[:'source_id'] if !opts[:'source_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Account-ApiKey'] = x_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ModelsQEvent>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccounteventApi#event_router_get_all_event_timestamp_keys_of_a_sub_account_from_a_specific_node_for_a_given_time_range\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find all events of a account from a specific node
    # @param x_account_api_key Account API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<ModelsQEvent>]
    def event_router_get_all_events_of_a_account_from_a_specific_node(x_account_api_key, opts = {})
      data, _status_code, _headers = event_router_get_all_events_of_a_account_from_a_specific_node_with_http_info(x_account_api_key, opts)
      data
    end

    # Find all events of a account from a specific node
    # @param x_account_api_key Account API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ModelsQEvent>, Fixnum, Hash)>] Array<ModelsQEvent> data, response status code and response headers
    def event_router_get_all_events_of_a_account_from_a_specific_node_with_http_info(x_account_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccounteventApi.event_router_get_all_events_of_a_account_from_a_specific_node ...'
      end
      # verify the required parameter 'x_account_api_key' is set
      if @api_client.config.client_side_validation && x_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_api_key' when calling AccounteventApi.event_router_get_all_events_of_a_account_from_a_specific_node"
      end
      # resource path
      local_var_path = '/account/event/node'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Account-ApiKey'] = x_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ModelsQEvent>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccounteventApi#event_router_get_all_events_of_a_account_from_a_specific_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find Event From Node by id
    # @param x_account_api_key Account API Key
    # @param event_id the eventId that you want to retrieve
    # @param [Hash] opts the optional parameters
    # @return [ModelsQEvent]
    def event_router_get_event_in_node(x_account_api_key, event_id, opts = {})
      data, _status_code, _headers = event_router_get_event_in_node_with_http_info(x_account_api_key, event_id, opts)
      data
    end

    # Find Event From Node by id
    # @param x_account_api_key Account API Key
    # @param event_id the eventId that you want to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelsQEvent, Fixnum, Hash)>] ModelsQEvent data, response status code and response headers
    def event_router_get_event_in_node_with_http_info(x_account_api_key, event_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccounteventApi.event_router_get_event_in_node ...'
      end
      # verify the required parameter 'x_account_api_key' is set
      if @api_client.config.client_side_validation && x_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_api_key' when calling AccounteventApi.event_router_get_event_in_node"
      end
      # verify the required parameter 'event_id' is set
      if @api_client.config.client_side_validation && event_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_id' when calling AccounteventApi.event_router_get_event_in_node"
      end
      # resource path
      local_var_path = '/account/event/node/{eventId}'.sub('{' + 'eventId' + '}', event_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Account-ApiKey'] = x_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelsQEvent')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccounteventApi#event_router_get_event_in_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
