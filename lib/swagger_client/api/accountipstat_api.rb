=begin
#SendPost API

#SendPost API to send transactional emails reliably

OpenAPI spec version: 1.0.0
Contact: hello@sendx.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module SwaggerClient
  class AccountipstatApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get All Aggregate Stats
    # @param x_account_api_key Account API Key
    # @param ipid the IPId you want to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @return [ModelsStat]
    def i_p_stat_router_get_all_aggregate_ip_stats(x_account_api_key, ipid, opts = {})
      data, _status_code, _headers = i_p_stat_router_get_all_aggregate_ip_stats_with_http_info(x_account_api_key, ipid, opts)
      data
    end

    # Get All Aggregate Stats
    # @param x_account_api_key Account API Key
    # @param ipid the IPId you want to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @return [Array<(ModelsStat, Fixnum, Hash)>] ModelsStat data, response status code and response headers
    def i_p_stat_router_get_all_aggregate_ip_stats_with_http_info(x_account_api_key, ipid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountipstatApi.i_p_stat_router_get_all_aggregate_ip_stats ...'
      end
      # verify the required parameter 'x_account_api_key' is set
      if @api_client.config.client_side_validation && x_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_api_key' when calling AccountipstatApi.i_p_stat_router_get_all_aggregate_ip_stats"
      end
      # verify the required parameter 'ipid' is set
      if @api_client.config.client_side_validation && ipid.nil?
        fail ArgumentError, "Missing the required parameter 'ipid' when calling AccountipstatApi.i_p_stat_router_get_all_aggregate_ip_stats"
      end
      # resource path
      local_var_path = '/account/ip/stat/{ipid}/aggregate'.sub('{' + 'ipid' + '}', ipid.to_s)

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Account-ApiKey'] = x_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelsStat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountipstatApi#i_p_stat_router_get_all_aggregate_ip_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get All Aggregate Stats by Group
    # @param x_account_api_key Account API Key
    # @param ipid the IPId you want to get
    # @param provider the group whose stats you want
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @return [ModelsStat]
    def i_p_stat_router_get_all_aggregate_ip_stats_by_group(x_account_api_key, ipid, provider, opts = {})
      data, _status_code, _headers = i_p_stat_router_get_all_aggregate_ip_stats_by_group_with_http_info(x_account_api_key, ipid, provider, opts)
      data
    end

    # Get All Aggregate Stats by Group
    # @param x_account_api_key Account API Key
    # @param ipid the IPId you want to get
    # @param provider the group whose stats you want
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @return [Array<(ModelsStat, Fixnum, Hash)>] ModelsStat data, response status code and response headers
    def i_p_stat_router_get_all_aggregate_ip_stats_by_group_with_http_info(x_account_api_key, ipid, provider, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountipstatApi.i_p_stat_router_get_all_aggregate_ip_stats_by_group ...'
      end
      # verify the required parameter 'x_account_api_key' is set
      if @api_client.config.client_side_validation && x_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_api_key' when calling AccountipstatApi.i_p_stat_router_get_all_aggregate_ip_stats_by_group"
      end
      # verify the required parameter 'ipid' is set
      if @api_client.config.client_side_validation && ipid.nil?
        fail ArgumentError, "Missing the required parameter 'ipid' when calling AccountipstatApi.i_p_stat_router_get_all_aggregate_ip_stats_by_group"
      end
      # verify the required parameter 'provider' is set
      if @api_client.config.client_side_validation && provider.nil?
        fail ArgumentError, "Missing the required parameter 'provider' when calling AccountipstatApi.i_p_stat_router_get_all_aggregate_ip_stats_by_group"
      end
      # resource path
      local_var_path = '/account/ip/stat/{ipid}/aggregate/provider'.sub('{' + 'ipid' + '}', ipid.to_s)

      # query parameters
      query_params = {}
      query_params[:'provider'] = provider
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Account-ApiKey'] = x_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelsStat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountipstatApi#i_p_stat_router_get_all_aggregate_ip_stats_by_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get All Aggregated Provider Stats for a IP
    # @param x_account_api_key Account API Key
    # @param ipid the IPId you want to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @return [Array<ModelsPIPStat>]
    def i_p_stat_router_get_all_aggregated_provider_stats_for_a_ip(x_account_api_key, ipid, opts = {})
      data, _status_code, _headers = i_p_stat_router_get_all_aggregated_provider_stats_for_a_ip_with_http_info(x_account_api_key, ipid, opts)
      data
    end

    # Get All Aggregated Provider Stats for a IP
    # @param x_account_api_key Account API Key
    # @param ipid the IPId you want to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @return [Array<(Array<ModelsPIPStat>, Fixnum, Hash)>] Array<ModelsPIPStat> data, response status code and response headers
    def i_p_stat_router_get_all_aggregated_provider_stats_for_a_ip_with_http_info(x_account_api_key, ipid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountipstatApi.i_p_stat_router_get_all_aggregated_provider_stats_for_a_ip ...'
      end
      # verify the required parameter 'x_account_api_key' is set
      if @api_client.config.client_side_validation && x_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_api_key' when calling AccountipstatApi.i_p_stat_router_get_all_aggregated_provider_stats_for_a_ip"
      end
      # verify the required parameter 'ipid' is set
      if @api_client.config.client_side_validation && ipid.nil?
        fail ArgumentError, "Missing the required parameter 'ipid' when calling AccountipstatApi.i_p_stat_router_get_all_aggregated_provider_stats_for_a_ip"
      end
      # resource path
      local_var_path = '/account/ip/stat/{ipid}/aggregate/providers'.sub('{' + 'ipid' + '}', ipid.to_s)

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Account-ApiKey'] = x_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ModelsPIPStat>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountipstatApi#i_p_stat_router_get_all_aggregated_provider_stats_for_a_ip\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get All Aggregated Provider Stats for a Specific Sub-Account of a IP
    # @param x_account_api_key Account API Key
    # @param ipid the IPId you want to get
    # @param sid the Sub Account Id you want to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @return [Array<ModelsPIPStat>]
    def i_p_stat_router_get_all_aggregated_provider_stats_for_a_specific_sub_account_of_a_ip(x_account_api_key, ipid, sid, opts = {})
      data, _status_code, _headers = i_p_stat_router_get_all_aggregated_provider_stats_for_a_specific_sub_account_of_a_ip_with_http_info(x_account_api_key, ipid, sid, opts)
      data
    end

    # Get All Aggregated Provider Stats for a Specific Sub-Account of a IP
    # @param x_account_api_key Account API Key
    # @param ipid the IPId you want to get
    # @param sid the Sub Account Id you want to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @return [Array<(Array<ModelsPIPStat>, Fixnum, Hash)>] Array<ModelsPIPStat> data, response status code and response headers
    def i_p_stat_router_get_all_aggregated_provider_stats_for_a_specific_sub_account_of_a_ip_with_http_info(x_account_api_key, ipid, sid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountipstatApi.i_p_stat_router_get_all_aggregated_provider_stats_for_a_specific_sub_account_of_a_ip ...'
      end
      # verify the required parameter 'x_account_api_key' is set
      if @api_client.config.client_side_validation && x_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_api_key' when calling AccountipstatApi.i_p_stat_router_get_all_aggregated_provider_stats_for_a_specific_sub_account_of_a_ip"
      end
      # verify the required parameter 'ipid' is set
      if @api_client.config.client_side_validation && ipid.nil?
        fail ArgumentError, "Missing the required parameter 'ipid' when calling AccountipstatApi.i_p_stat_router_get_all_aggregated_provider_stats_for_a_specific_sub_account_of_a_ip"
      end
      # verify the required parameter 'sid' is set
      if @api_client.config.client_side_validation && sid.nil?
        fail ArgumentError, "Missing the required parameter 'sid' when calling AccountipstatApi.i_p_stat_router_get_all_aggregated_provider_stats_for_a_specific_sub_account_of_a_ip"
      end
      # resource path
      local_var_path = '/account/ip/stat/{ipid}/aggregate/sid/{sid}/providers'.sub('{' + 'ipid' + '}', ipid.to_s).sub('{' + 'sid' + '}', sid.to_s)

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Account-ApiKey'] = x_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ModelsPIPStat>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountipstatApi#i_p_stat_router_get_all_aggregated_provider_stats_for_a_specific_sub_account_of_a_ip\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get All Aggregated Sub-Account Stats for an IP
    # @param x_account_api_key Account API Key
    # @param ipid the IPId you want to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @return [Array<ModelsSIPStat>]
    def i_p_stat_router_get_all_aggregated_sub_account_stats_for_an_ip(x_account_api_key, ipid, opts = {})
      data, _status_code, _headers = i_p_stat_router_get_all_aggregated_sub_account_stats_for_an_ip_with_http_info(x_account_api_key, ipid, opts)
      data
    end

    # Get All Aggregated Sub-Account Stats for an IP
    # @param x_account_api_key Account API Key
    # @param ipid the IPId you want to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @return [Array<(Array<ModelsSIPStat>, Fixnum, Hash)>] Array<ModelsSIPStat> data, response status code and response headers
    def i_p_stat_router_get_all_aggregated_sub_account_stats_for_an_ip_with_http_info(x_account_api_key, ipid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountipstatApi.i_p_stat_router_get_all_aggregated_sub_account_stats_for_an_ip ...'
      end
      # verify the required parameter 'x_account_api_key' is set
      if @api_client.config.client_side_validation && x_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_api_key' when calling AccountipstatApi.i_p_stat_router_get_all_aggregated_sub_account_stats_for_an_ip"
      end
      # verify the required parameter 'ipid' is set
      if @api_client.config.client_side_validation && ipid.nil?
        fail ArgumentError, "Missing the required parameter 'ipid' when calling AccountipstatApi.i_p_stat_router_get_all_aggregated_sub_account_stats_for_an_ip"
      end
      # resource path
      local_var_path = '/account/ip/stat/{ipid}/aggregate/subaccounts'.sub('{' + 'ipid' + '}', ipid.to_s)

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Account-ApiKey'] = x_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ModelsSIPStat>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountipstatApi#i_p_stat_router_get_all_aggregated_sub_account_stats_for_an_ip\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get All IP Stats
    # @param x_account_api_key Account API Key
    # @param ipid the IPId you want to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @return [Array<ModelsRIPStat>]
    def i_p_stat_router_get_all_ip_stats(x_account_api_key, ipid, opts = {})
      data, _status_code, _headers = i_p_stat_router_get_all_ip_stats_with_http_info(x_account_api_key, ipid, opts)
      data
    end

    # Get All IP Stats
    # @param x_account_api_key Account API Key
    # @param ipid the IPId you want to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @return [Array<(Array<ModelsRIPStat>, Fixnum, Hash)>] Array<ModelsRIPStat> data, response status code and response headers
    def i_p_stat_router_get_all_ip_stats_with_http_info(x_account_api_key, ipid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountipstatApi.i_p_stat_router_get_all_ip_stats ...'
      end
      # verify the required parameter 'x_account_api_key' is set
      if @api_client.config.client_side_validation && x_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_api_key' when calling AccountipstatApi.i_p_stat_router_get_all_ip_stats"
      end
      # verify the required parameter 'ipid' is set
      if @api_client.config.client_side_validation && ipid.nil?
        fail ArgumentError, "Missing the required parameter 'ipid' when calling AccountipstatApi.i_p_stat_router_get_all_ip_stats"
      end
      # resource path
      local_var_path = '/account/ip/stat/{ipid}'.sub('{' + 'ipid' + '}', ipid.to_s)

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Account-ApiKey'] = x_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ModelsRIPStat>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountipstatApi#i_p_stat_router_get_all_ip_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get All IP Stats by Group
    # @param ipid the IPId you want to get
    # @param x_account_api_key Account API Key
    # @param provider the provider whose stats you want
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @return [Array<ModelsRIPStat>]
    def i_p_stat_router_get_all_ip_stats_by_group(ipid, x_account_api_key, provider, opts = {})
      data, _status_code, _headers = i_p_stat_router_get_all_ip_stats_by_group_with_http_info(ipid, x_account_api_key, provider, opts)
      data
    end

    # Get All IP Stats by Group
    # @param ipid the IPId you want to get
    # @param x_account_api_key Account API Key
    # @param provider the provider whose stats you want
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @return [Array<(Array<ModelsRIPStat>, Fixnum, Hash)>] Array<ModelsRIPStat> data, response status code and response headers
    def i_p_stat_router_get_all_ip_stats_by_group_with_http_info(ipid, x_account_api_key, provider, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountipstatApi.i_p_stat_router_get_all_ip_stats_by_group ...'
      end
      # verify the required parameter 'ipid' is set
      if @api_client.config.client_side_validation && ipid.nil?
        fail ArgumentError, "Missing the required parameter 'ipid' when calling AccountipstatApi.i_p_stat_router_get_all_ip_stats_by_group"
      end
      # verify the required parameter 'x_account_api_key' is set
      if @api_client.config.client_side_validation && x_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_api_key' when calling AccountipstatApi.i_p_stat_router_get_all_ip_stats_by_group"
      end
      # verify the required parameter 'provider' is set
      if @api_client.config.client_side_validation && provider.nil?
        fail ArgumentError, "Missing the required parameter 'provider' when calling AccountipstatApi.i_p_stat_router_get_all_ip_stats_by_group"
      end
      # resource path
      local_var_path = '/account/ip/stat/{ipid}/provider'.sub('{' + 'ipid' + '}', ipid.to_s)

      # query parameters
      query_params = {}
      query_params[:'provider'] = provider
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Account-ApiKey'] = x_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ModelsRIPStat>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountipstatApi#i_p_stat_router_get_all_ip_stats_by_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
