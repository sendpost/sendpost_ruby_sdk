=begin
#SendPost API

#SendPost API to send transactional emails reliably

OpenAPI spec version: 1.0.0
Contact: hello@sendx.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module SwaggerClient
  class AccountincidentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add comment to Incident
    # @param x_account_api_key Account API Key
    # @param incident_id the incident id
    # @param body The Comment content
    # @param [Hash] opts the optional parameters
    # @return [ModelsComment]
    def incident_router_add(x_account_api_key, incident_id, body, opts = {})
      data, _status_code, _headers = incident_router_add_with_http_info(x_account_api_key, incident_id, body, opts)
      data
    end

    # Add comment to Incident
    # @param x_account_api_key Account API Key
    # @param incident_id the incident id
    # @param body The Comment content
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelsComment, Fixnum, Hash)>] ModelsComment data, response status code and response headers
    def incident_router_add_with_http_info(x_account_api_key, incident_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountincidentApi.incident_router_add ...'
      end
      # verify the required parameter 'x_account_api_key' is set
      if @api_client.config.client_side_validation && x_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_api_key' when calling AccountincidentApi.incident_router_add"
      end
      # verify the required parameter 'incident_id' is set
      if @api_client.config.client_side_validation && incident_id.nil?
        fail ArgumentError, "Missing the required parameter 'incident_id' when calling AccountincidentApi.incident_router_add"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AccountincidentApi.incident_router_add"
      end
      # resource path
      local_var_path = '/account/incident/{incidentId}/comment'.sub('{' + 'incidentId' + '}', incident_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Account-ApiKey'] = x_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelsComment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountincidentApi#incident_router_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Count Total Incidents
    # @param x_account_api_key Account API Key
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :status status
    # @option opts [Integer] :tag status
    # @option opts [String] :search search term
    # @return [ModelsCountStat]
    def incident_router_count(x_account_api_key, opts = {})
      data, _status_code, _headers = incident_router_count_with_http_info(x_account_api_key, opts)
      data
    end

    # Count Total Incidents
    # @param x_account_api_key Account API Key
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :status status
    # @option opts [Integer] :tag status
    # @option opts [String] :search search term
    # @return [Array<(ModelsCountStat, Fixnum, Hash)>] ModelsCountStat data, response status code and response headers
    def incident_router_count_with_http_info(x_account_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountincidentApi.incident_router_count ...'
      end
      # verify the required parameter 'x_account_api_key' is set
      if @api_client.config.client_side_validation && x_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_api_key' when calling AccountincidentApi.incident_router_count"
      end
      # resource path
      local_var_path = '/account/incident/count'

      # query parameters
      query_params = {}
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'tag'] = opts[:'tag'] if !opts[:'tag'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Account-ApiKey'] = x_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelsCountStat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountincidentApi#incident_router_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Incident
    # @param x_account_api_key Account API Key
    # @param body The Incident content
    # @param [Hash] opts the optional parameters
    # @return [ModelsIncident]
    def incident_router_create(x_account_api_key, body, opts = {})
      data, _status_code, _headers = incident_router_create_with_http_info(x_account_api_key, body, opts)
      data
    end

    # Create Incident
    # @param x_account_api_key Account API Key
    # @param body The Incident content
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelsIncident, Fixnum, Hash)>] ModelsIncident data, response status code and response headers
    def incident_router_create_with_http_info(x_account_api_key, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountincidentApi.incident_router_create ...'
      end
      # verify the required parameter 'x_account_api_key' is set
      if @api_client.config.client_side_validation && x_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_api_key' when calling AccountincidentApi.incident_router_create"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AccountincidentApi.incident_router_create"
      end
      # resource path
      local_var_path = '/account/incident/'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Account-ApiKey'] = x_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelsIncident')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountincidentApi#incident_router_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get All Incidents
    # @param x_account_api_key Account API Key
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset offset
    # @option opts [Integer] :limit limit
    # @option opts [String] :search search term
    # @option opts [Integer] :status status
    # @option opts [Integer] :tag status
    # @return [Array<ModelsIncident>]
    def incident_router_get_all(x_account_api_key, opts = {})
      data, _status_code, _headers = incident_router_get_all_with_http_info(x_account_api_key, opts)
      data
    end

    # Get All Incidents
    # @param x_account_api_key Account API Key
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset offset
    # @option opts [Integer] :limit limit
    # @option opts [String] :search search term
    # @option opts [Integer] :status status
    # @option opts [Integer] :tag status
    # @return [Array<(Array<ModelsIncident>, Fixnum, Hash)>] Array<ModelsIncident> data, response status code and response headers
    def incident_router_get_all_with_http_info(x_account_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountincidentApi.incident_router_get_all ...'
      end
      # verify the required parameter 'x_account_api_key' is set
      if @api_client.config.client_side_validation && x_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_api_key' when calling AccountincidentApi.incident_router_get_all"
      end
      # resource path
      local_var_path = '/account/incident/'

      # query parameters
      query_params = {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'tag'] = opts[:'tag'] if !opts[:'tag'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Account-ApiKey'] = x_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ModelsIncident>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountincidentApi#incident_router_get_all\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get All Comments Associated with Incident
    # @param x_account_api_key Account API Key
    # @param incident_id the IncidentId you want to get comments for
    # @param [Hash] opts the optional parameters
    # @return [Array<ModelsComment>]
    def incident_router_get_all_comments(x_account_api_key, incident_id, opts = {})
      data, _status_code, _headers = incident_router_get_all_comments_with_http_info(x_account_api_key, incident_id, opts)
      data
    end

    # Get All Comments Associated with Incident
    # @param x_account_api_key Account API Key
    # @param incident_id the IncidentId you want to get comments for
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ModelsComment>, Fixnum, Hash)>] Array<ModelsComment> data, response status code and response headers
    def incident_router_get_all_comments_with_http_info(x_account_api_key, incident_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountincidentApi.incident_router_get_all_comments ...'
      end
      # verify the required parameter 'x_account_api_key' is set
      if @api_client.config.client_side_validation && x_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_api_key' when calling AccountincidentApi.incident_router_get_all_comments"
      end
      # verify the required parameter 'incident_id' is set
      if @api_client.config.client_side_validation && incident_id.nil?
        fail ArgumentError, "Missing the required parameter 'incident_id' when calling AccountincidentApi.incident_router_get_all_comments"
      end
      # resource path
      local_var_path = '/account/incident/{incidentId}/comment'.sub('{' + 'incidentId' + '}', incident_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Account-ApiKey'] = x_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ModelsComment>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountincidentApi#incident_router_get_all_comments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find Incident by incidentId
    # @param x_account_api_key Account API Key
    # @param incident_id the IncidentId you want to get
    # @param [Hash] opts the optional parameters
    # @return [ModelsIncident]
    def incident_router_get_incident(x_account_api_key, incident_id, opts = {})
      data, _status_code, _headers = incident_router_get_incident_with_http_info(x_account_api_key, incident_id, opts)
      data
    end

    # Find Incident by incidentId
    # @param x_account_api_key Account API Key
    # @param incident_id the IncidentId you want to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelsIncident, Fixnum, Hash)>] ModelsIncident data, response status code and response headers
    def incident_router_get_incident_with_http_info(x_account_api_key, incident_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountincidentApi.incident_router_get_incident ...'
      end
      # verify the required parameter 'x_account_api_key' is set
      if @api_client.config.client_side_validation && x_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_api_key' when calling AccountincidentApi.incident_router_get_incident"
      end
      # verify the required parameter 'incident_id' is set
      if @api_client.config.client_side_validation && incident_id.nil?
        fail ArgumentError, "Missing the required parameter 'incident_id' when calling AccountincidentApi.incident_router_get_incident"
      end
      # resource path
      local_var_path = '/account/incident/{incidentId}'.sub('{' + 'incidentId' + '}', incident_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Account-ApiKey'] = x_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelsIncident')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountincidentApi#incident_router_get_incident\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Incident
    # @param x_account_api_key Account API Key
    # @param incident_id the Incident Id you want to update
    # @param body The Incident content
    # @param [Hash] opts the optional parameters
    # @return [ModelsIncident]
    def incident_router_update(x_account_api_key, incident_id, body, opts = {})
      data, _status_code, _headers = incident_router_update_with_http_info(x_account_api_key, incident_id, body, opts)
      data
    end

    # Update Incident
    # @param x_account_api_key Account API Key
    # @param incident_id the Incident Id you want to update
    # @param body The Incident content
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelsIncident, Fixnum, Hash)>] ModelsIncident data, response status code and response headers
    def incident_router_update_with_http_info(x_account_api_key, incident_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountincidentApi.incident_router_update ...'
      end
      # verify the required parameter 'x_account_api_key' is set
      if @api_client.config.client_side_validation && x_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_api_key' when calling AccountincidentApi.incident_router_update"
      end
      # verify the required parameter 'incident_id' is set
      if @api_client.config.client_side_validation && incident_id.nil?
        fail ArgumentError, "Missing the required parameter 'incident_id' when calling AccountincidentApi.incident_router_update"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AccountincidentApi.incident_router_update"
      end
      # resource path
      local_var_path = '/account/incident/{incidentId}'.sub('{' + 'incidentId' + '}', incident_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Account-ApiKey'] = x_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelsIncident')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountincidentApi#incident_router_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
