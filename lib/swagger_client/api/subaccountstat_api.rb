=begin
#SendPost API

#SendPost API to send transactional emails reliably

OpenAPI spec version: 1.0.0
Contact: hello@sendx.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module SwaggerClient
  class SubaccountstatApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get All Aggregate Sub-Account Stats
    # @param x_sub_account_api_key Sub-Account API Key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @return [ModelsStat]
    def sub_account_stat_router_get_all_aggregate_sub_account_stats(x_sub_account_api_key, opts = {})
      data, _status_code, _headers = sub_account_stat_router_get_all_aggregate_sub_account_stats_with_http_info(x_sub_account_api_key, opts)
      data
    end

    # Get All Aggregate Sub-Account Stats
    # @param x_sub_account_api_key Sub-Account API Key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @return [Array<(ModelsStat, Fixnum, Hash)>] ModelsStat data, response status code and response headers
    def sub_account_stat_router_get_all_aggregate_sub_account_stats_with_http_info(x_sub_account_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubaccountstatApi.sub_account_stat_router_get_all_aggregate_sub_account_stats ...'
      end
      # verify the required parameter 'x_sub_account_api_key' is set
      if @api_client.config.client_side_validation && x_sub_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_sub_account_api_key' when calling SubaccountstatApi.sub_account_stat_router_get_all_aggregate_sub_account_stats"
      end
      # resource path
      local_var_path = '/subaccount/stat/aggregate'

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-SubAccount-ApiKey'] = x_sub_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelsStat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubaccountstatApi#sub_account_stat_router_get_all_aggregate_sub_account_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get All Aggregate Sub-Account Stats by Group
    # @param x_sub_account_api_key Sub-Account API Key
    # @param group the group whose stats you want
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @return [ModelsStat]
    def sub_account_stat_router_get_all_aggregate_sub_account_stats_by_group(x_sub_account_api_key, group, opts = {})
      data, _status_code, _headers = sub_account_stat_router_get_all_aggregate_sub_account_stats_by_group_with_http_info(x_sub_account_api_key, group, opts)
      data
    end

    # Get All Aggregate Sub-Account Stats by Group
    # @param x_sub_account_api_key Sub-Account API Key
    # @param group the group whose stats you want
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @return [Array<(ModelsStat, Fixnum, Hash)>] ModelsStat data, response status code and response headers
    def sub_account_stat_router_get_all_aggregate_sub_account_stats_by_group_with_http_info(x_sub_account_api_key, group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubaccountstatApi.sub_account_stat_router_get_all_aggregate_sub_account_stats_by_group ...'
      end
      # verify the required parameter 'x_sub_account_api_key' is set
      if @api_client.config.client_side_validation && x_sub_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_sub_account_api_key' when calling SubaccountstatApi.sub_account_stat_router_get_all_aggregate_sub_account_stats_by_group"
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling SubaccountstatApi.sub_account_stat_router_get_all_aggregate_sub_account_stats_by_group"
      end
      # resource path
      local_var_path = '/subaccount/stat/aggregate/group'

      # query parameters
      query_params = {}
      query_params[:'group'] = group
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-SubAccount-ApiKey'] = x_sub_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelsStat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubaccountstatApi#sub_account_stat_router_get_all_aggregate_sub_account_stats_by_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get All Aggregated Group Stats for a Sub-Account
    # @param x_sub_account_api_key Sub-Account API Key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @return [Array<ModelsAGStat>]
    def sub_account_stat_router_get_all_aggregated_group_stats_for_a_sub_account(x_sub_account_api_key, opts = {})
      data, _status_code, _headers = sub_account_stat_router_get_all_aggregated_group_stats_for_a_sub_account_with_http_info(x_sub_account_api_key, opts)
      data
    end

    # Get All Aggregated Group Stats for a Sub-Account
    # @param x_sub_account_api_key Sub-Account API Key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @return [Array<(Array<ModelsAGStat>, Fixnum, Hash)>] Array<ModelsAGStat> data, response status code and response headers
    def sub_account_stat_router_get_all_aggregated_group_stats_for_a_sub_account_with_http_info(x_sub_account_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubaccountstatApi.sub_account_stat_router_get_all_aggregated_group_stats_for_a_sub_account ...'
      end
      # verify the required parameter 'x_sub_account_api_key' is set
      if @api_client.config.client_side_validation && x_sub_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_sub_account_api_key' when calling SubaccountstatApi.sub_account_stat_router_get_all_aggregated_group_stats_for_a_sub_account"
      end
      # resource path
      local_var_path = '/subaccount/stat/aggregate/groups'

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-SubAccount-ApiKey'] = x_sub_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ModelsAGStat>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubaccountstatApi#sub_account_stat_router_get_all_aggregated_group_stats_for_a_sub_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get All Aggregated IP Stats for a Sub-Account
    # @param x_sub_account_api_key Sub-Account API Key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @return [Array<ModelsAIPStat>]
    def sub_account_stat_router_get_all_aggregated_ip_stats_for_a_sub_account(x_sub_account_api_key, opts = {})
      data, _status_code, _headers = sub_account_stat_router_get_all_aggregated_ip_stats_for_a_sub_account_with_http_info(x_sub_account_api_key, opts)
      data
    end

    # Get All Aggregated IP Stats for a Sub-Account
    # @param x_sub_account_api_key Sub-Account API Key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @return [Array<(Array<ModelsAIPStat>, Fixnum, Hash)>] Array<ModelsAIPStat> data, response status code and response headers
    def sub_account_stat_router_get_all_aggregated_ip_stats_for_a_sub_account_with_http_info(x_sub_account_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubaccountstatApi.sub_account_stat_router_get_all_aggregated_ip_stats_for_a_sub_account ...'
      end
      # verify the required parameter 'x_sub_account_api_key' is set
      if @api_client.config.client_side_validation && x_sub_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_sub_account_api_key' when calling SubaccountstatApi.sub_account_stat_router_get_all_aggregated_ip_stats_for_a_sub_account"
      end
      # resource path
      local_var_path = '/subaccount/stat/aggregate/ips'

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-SubAccount-ApiKey'] = x_sub_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ModelsAIPStat>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubaccountstatApi#sub_account_stat_router_get_all_aggregated_ip_stats_for_a_sub_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get All Aggregated Provider Stats for a Specific IP of a Sub-Account
    # @param x_sub_account_api_key Sub-Account API Key
    # @param ipid the IPId you want to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @return [Array<ModelsPIPStat>]
    def sub_account_stat_router_get_all_aggregated_provider_stats_for_a_specific_ip_of_a_sub_account(x_sub_account_api_key, ipid, opts = {})
      data, _status_code, _headers = sub_account_stat_router_get_all_aggregated_provider_stats_for_a_specific_ip_of_a_sub_account_with_http_info(x_sub_account_api_key, ipid, opts)
      data
    end

    # Get All Aggregated Provider Stats for a Specific IP of a Sub-Account
    # @param x_sub_account_api_key Sub-Account API Key
    # @param ipid the IPId you want to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @return [Array<(Array<ModelsPIPStat>, Fixnum, Hash)>] Array<ModelsPIPStat> data, response status code and response headers
    def sub_account_stat_router_get_all_aggregated_provider_stats_for_a_specific_ip_of_a_sub_account_with_http_info(x_sub_account_api_key, ipid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubaccountstatApi.sub_account_stat_router_get_all_aggregated_provider_stats_for_a_specific_ip_of_a_sub_account ...'
      end
      # verify the required parameter 'x_sub_account_api_key' is set
      if @api_client.config.client_side_validation && x_sub_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_sub_account_api_key' when calling SubaccountstatApi.sub_account_stat_router_get_all_aggregated_provider_stats_for_a_specific_ip_of_a_sub_account"
      end
      # verify the required parameter 'ipid' is set
      if @api_client.config.client_side_validation && ipid.nil?
        fail ArgumentError, "Missing the required parameter 'ipid' when calling SubaccountstatApi.sub_account_stat_router_get_all_aggregated_provider_stats_for_a_specific_ip_of_a_sub_account"
      end
      # resource path
      local_var_path = '/subaccount/stat/aggregate/ip/{ipid}/providers'.sub('{' + 'ipid' + '}', ipid.to_s)

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-SubAccount-ApiKey'] = x_sub_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ModelsPIPStat>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubaccountstatApi#sub_account_stat_router_get_all_aggregated_provider_stats_for_a_specific_ip_of_a_sub_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get All Aggregated Provider Stats for a Sub-Account
    # @param x_sub_account_api_key Sub-Account API Key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @return [Array<ModelsPIPStat>]
    def sub_account_stat_router_get_all_aggregated_provider_stats_for_a_sub_account(x_sub_account_api_key, opts = {})
      data, _status_code, _headers = sub_account_stat_router_get_all_aggregated_provider_stats_for_a_sub_account_with_http_info(x_sub_account_api_key, opts)
      data
    end

    # Get All Aggregated Provider Stats for a Sub-Account
    # @param x_sub_account_api_key Sub-Account API Key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @return [Array<(Array<ModelsPIPStat>, Fixnum, Hash)>] Array<ModelsPIPStat> data, response status code and response headers
    def sub_account_stat_router_get_all_aggregated_provider_stats_for_a_sub_account_with_http_info(x_sub_account_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubaccountstatApi.sub_account_stat_router_get_all_aggregated_provider_stats_for_a_sub_account ...'
      end
      # verify the required parameter 'x_sub_account_api_key' is set
      if @api_client.config.client_side_validation && x_sub_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_sub_account_api_key' when calling SubaccountstatApi.sub_account_stat_router_get_all_aggregated_provider_stats_for_a_sub_account"
      end
      # resource path
      local_var_path = '/subaccount/stat/aggregate/providers'

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-SubAccount-ApiKey'] = x_sub_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ModelsPIPStat>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubaccountstatApi#sub_account_stat_router_get_all_aggregated_provider_stats_for_a_sub_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get All Sub-Account Stats
    # @param x_sub_account_api_key Sub-Account API Key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @return [Array<ModelsRStat>]
    def sub_account_stat_router_get_all_sub_account_stats(x_sub_account_api_key, opts = {})
      data, _status_code, _headers = sub_account_stat_router_get_all_sub_account_stats_with_http_info(x_sub_account_api_key, opts)
      data
    end

    # Get All Sub-Account Stats
    # @param x_sub_account_api_key Sub-Account API Key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @return [Array<(Array<ModelsRStat>, Fixnum, Hash)>] Array<ModelsRStat> data, response status code and response headers
    def sub_account_stat_router_get_all_sub_account_stats_with_http_info(x_sub_account_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubaccountstatApi.sub_account_stat_router_get_all_sub_account_stats ...'
      end
      # verify the required parameter 'x_sub_account_api_key' is set
      if @api_client.config.client_side_validation && x_sub_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_sub_account_api_key' when calling SubaccountstatApi.sub_account_stat_router_get_all_sub_account_stats"
      end
      # resource path
      local_var_path = '/subaccount/stat/'

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-SubAccount-ApiKey'] = x_sub_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ModelsRStat>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubaccountstatApi#sub_account_stat_router_get_all_sub_account_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get All Sub-Account Stats by Group
    # @param x_sub_account_api_key Sub-Account API Key
    # @param group the tag whose stats you want
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @return [Array<ModelsRStat>]
    def sub_account_stat_router_get_all_sub_account_stats_by_group(x_sub_account_api_key, group, opts = {})
      data, _status_code, _headers = sub_account_stat_router_get_all_sub_account_stats_by_group_with_http_info(x_sub_account_api_key, group, opts)
      data
    end

    # Get All Sub-Account Stats by Group
    # @param x_sub_account_api_key Sub-Account API Key
    # @param group the tag whose stats you want
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from from date
    # @option opts [String] :to to date
    # @return [Array<(Array<ModelsRStat>, Fixnum, Hash)>] Array<ModelsRStat> data, response status code and response headers
    def sub_account_stat_router_get_all_sub_account_stats_by_group_with_http_info(x_sub_account_api_key, group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubaccountstatApi.sub_account_stat_router_get_all_sub_account_stats_by_group ...'
      end
      # verify the required parameter 'x_sub_account_api_key' is set
      if @api_client.config.client_side_validation && x_sub_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_sub_account_api_key' when calling SubaccountstatApi.sub_account_stat_router_get_all_sub_account_stats_by_group"
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling SubaccountstatApi.sub_account_stat_router_get_all_sub_account_stats_by_group"
      end
      # resource path
      local_var_path = '/subaccount/stat/group'

      # query parameters
      query_params = {}
      query_params[:'group'] = group
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-SubAccount-ApiKey'] = x_sub_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ModelsRStat>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubaccountstatApi#sub_account_stat_router_get_all_sub_account_stats_by_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
