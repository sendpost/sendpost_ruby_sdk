=begin
#SendPost API

#SendPost API to send transactional emails reliably

OpenAPI spec version: 1.0.0
Contact: hello@sendx.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module SwaggerClient
  class AccountvalidateApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Validate Emails In File Asynchronously
    # @param fileinput CSV whose emails need to be validated
    # @param x_account_api_key Account API Key
    # @param [Hash] opts the optional parameters
    # @return [ModelsBulkResponse]
    def validate_router_validate_email_bulk(fileinput, x_account_api_key, opts = {})
      data, _status_code, _headers = validate_router_validate_email_bulk_with_http_info(fileinput, x_account_api_key, opts)
      data
    end

    # Validate Emails In File Asynchronously
    # @param fileinput CSV whose emails need to be validated
    # @param x_account_api_key Account API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelsBulkResponse, Fixnum, Hash)>] ModelsBulkResponse data, response status code and response headers
    def validate_router_validate_email_bulk_with_http_info(fileinput, x_account_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountvalidateApi.validate_router_validate_email_bulk ...'
      end
      # verify the required parameter 'fileinput' is set
      if @api_client.config.client_side_validation && fileinput.nil?
        fail ArgumentError, "Missing the required parameter 'fileinput' when calling AccountvalidateApi.validate_router_validate_email_bulk"
      end
      # verify the required parameter 'x_account_api_key' is set
      if @api_client.config.client_side_validation && x_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_api_key' when calling AccountvalidateApi.validate_router_validate_email_bulk"
      end
      # resource path
      local_var_path = '/account/validate/bulk'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])
      header_params[:'X-Account-ApiKey'] = x_account_api_key

      # form parameters
      form_params = {}
      form_params['fileinput'] = fileinput

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelsBulkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountvalidateApi#validate_router_validate_email_bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate Email List Synchronously
    # @param x_account_api_key Account API Key
    # @param body The email list to be sent for being validated
    # @param [Hash] opts the optional parameters
    # @return [ModelsCleanedList]
    def validate_router_validate_email_list(x_account_api_key, body, opts = {})
      data, _status_code, _headers = validate_router_validate_email_list_with_http_info(x_account_api_key, body, opts)
      data
    end

    # Validate Email List Synchronously
    # @param x_account_api_key Account API Key
    # @param body The email list to be sent for being validated
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelsCleanedList, Fixnum, Hash)>] ModelsCleanedList data, response status code and response headers
    def validate_router_validate_email_list_with_http_info(x_account_api_key, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountvalidateApi.validate_router_validate_email_list ...'
      end
      # verify the required parameter 'x_account_api_key' is set
      if @api_client.config.client_side_validation && x_account_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_api_key' when calling AccountvalidateApi.validate_router_validate_email_list"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AccountvalidateApi.validate_router_validate_email_list"
      end
      # resource path
      local_var_path = '/account/validate/'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Account-ApiKey'] = x_account_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelsCleanedList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountvalidateApi#validate_router_validate_email_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
