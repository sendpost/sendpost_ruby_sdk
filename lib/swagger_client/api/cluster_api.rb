=begin
#SendPost API

#SendPost API to send transactional emails reliably

OpenAPI spec version: 1.0.0
Contact: hello@sendx.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module SwaggerClient
  class ClusterApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete item from cache of every node in cluster
    # @param x_system_api_key System API Key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name cache name
    # @option opts [String] :key cache item key to delete
    # @return [nil]
    def cluster_router_delete_item_from_cache_of_every_node_in_cluster(x_system_api_key, opts = {})
      cluster_router_delete_item_from_cache_of_every_node_in_cluster_with_http_info(x_system_api_key, opts)
      nil
    end

    # Delete item from cache of every node in cluster
    # @param x_system_api_key System API Key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name cache name
    # @option opts [String] :key cache item key to delete
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def cluster_router_delete_item_from_cache_of_every_node_in_cluster_with_http_info(x_system_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClusterApi.cluster_router_delete_item_from_cache_of_every_node_in_cluster ...'
      end
      # verify the required parameter 'x_system_api_key' is set
      if @api_client.config.client_side_validation && x_system_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_system_api_key' when calling ClusterApi.cluster_router_delete_item_from_cache_of_every_node_in_cluster"
      end
      # resource path
      local_var_path = '/cluster/cache'

      # query parameters
      query_params = {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'key'] = opts[:'key'] if !opts[:'key'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-System-ApiKey'] = x_system_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClusterApi#cluster_router_delete_item_from_cache_of_every_node_in_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete item from cache of specific node in cluster
    # @param x_system_api_key System API Key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name cache name
    # @option opts [String] :key cache item key to delete
    # @return [nil]
    def cluster_router_delete_item_from_cache_of_specific_node_in_cluster(x_system_api_key, opts = {})
      cluster_router_delete_item_from_cache_of_specific_node_in_cluster_with_http_info(x_system_api_key, opts)
      nil
    end

    # Delete item from cache of specific node in cluster
    # @param x_system_api_key System API Key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name cache name
    # @option opts [String] :key cache item key to delete
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def cluster_router_delete_item_from_cache_of_specific_node_in_cluster_with_http_info(x_system_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClusterApi.cluster_router_delete_item_from_cache_of_specific_node_in_cluster ...'
      end
      # verify the required parameter 'x_system_api_key' is set
      if @api_client.config.client_side_validation && x_system_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_system_api_key' when calling ClusterApi.cluster_router_delete_item_from_cache_of_specific_node_in_cluster"
      end
      # resource path
      local_var_path = '/cluster/cache/node'

      # query parameters
      query_params = {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'key'] = opts[:'key'] if !opts[:'key'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-System-ApiKey'] = x_system_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClusterApi#cluster_router_delete_item_from_cache_of_specific_node_in_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
